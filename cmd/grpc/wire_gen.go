// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"errors"
	"github.com/elct9620/clean-architecture-in-go-2025/internal/api/grpc"
	"github.com/elct9620/clean-architecture-in-go-2025/internal/repository"
	"github.com/elct9620/clean-architecture-in-go-2025/internal/repository/sqlite"
	"github.com/elct9620/clean-architecture-in-go-2025/internal/usecase"
	"github.com/elct9620/clean-architecture-in-go-2025/internal/validator"
)

import (
	_ "embed"
)

// Injectors from wire.go:

func initializeInMemory() (*grpc.Server, func(), error) {
	inMemoryOrderRepository := repository.NewInMemoryOrderRepository()
	inMemoryTokenRepository, err := repository.NewInMemoryTokenRepository()
	if err != nil {
		return nil, nil, err
	}
	validatorValidator := validator.New()
	placeOrder := usecase.NewPlaceOrder(inMemoryOrderRepository, inMemoryTokenRepository, validatorValidator)
	lookupOrder := usecase.NewLookupOrder(inMemoryOrderRepository, inMemoryTokenRepository)
	orderServer := &grpc.OrderServer{
		PlaceOrderUsecase:  placeOrder,
		LookupOrderUsecase: lookupOrder,
	}
	server := grpc.NewServer(orderServer)
	return server, func() {
	}, nil
}

func initializeBolt() (*grpc.Server, func(), error) {
	db, cleanup, err := provideBoltDb()
	if err != nil {
		return nil, nil, err
	}
	boltOrderRepository := repository.NewBoltOrderRepository(db)
	boltTokenRepository, err := repository.NewBoltTokenRepository(db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	validatorValidator := validator.New()
	placeOrder := usecase.NewPlaceOrder(boltOrderRepository, boltTokenRepository, validatorValidator)
	lookupOrder := usecase.NewLookupOrder(boltOrderRepository, boltTokenRepository)
	orderServer := &grpc.OrderServer{
		PlaceOrderUsecase:  placeOrder,
		LookupOrderUsecase: lookupOrder,
	}
	server := grpc.NewServer(orderServer)
	return server, func() {
		cleanup()
	}, nil
}

func initializeSQLite() (*grpc.Server, func(), error) {
	db, cleanup, err := provideSQLiteDb()
	if err != nil {
		return nil, nil, err
	}
	queries := sqlite.New(db)
	sqLiteOrderRepository := repository.NewSQLiteOrderRepository(db, queries)
	sqLiteTokenRepository, err := repository.NewSQLiteTokenRepository(queries)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	validatorValidator := validator.New()
	placeOrder := usecase.NewPlaceOrder(sqLiteOrderRepository, sqLiteTokenRepository, validatorValidator)
	lookupOrder := usecase.NewLookupOrder(sqLiteOrderRepository, sqLiteTokenRepository)
	orderServer := &grpc.OrderServer{
		PlaceOrderUsecase:  placeOrder,
		LookupOrderUsecase: lookupOrder,
	}
	server := grpc.NewServer(orderServer)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

func initialize(databaseType string) (*grpc.Server, func(), error) {
	switch databaseType {
	case "in-memory":
		return initializeInMemory()
	case "bolt":
		return initializeBolt()
	case "sqlite":
		return initializeSQLite()
	default:
		return nil, func() {}, errors.New("unsupported database type")
	}
}
