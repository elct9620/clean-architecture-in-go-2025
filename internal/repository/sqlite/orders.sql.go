// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package sqlite

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  id, customer_name
) VALUES (
  ?, ?
) RETURNING id, customer_name
`

type CreateOrderParams struct {
	ID           string
	CustomerName string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.ID, arg.CustomerName)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerName)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
  id, order_id, name, quantity, unit_price
) VALUES (
  ?, ?, ?, ?, ?
) RETURNING id, order_id, name, quantity, unit_price
`

type CreateOrderItemParams struct {
	ID        string
	OrderID   string
	Name      string
	Quantity  int64
	UnitPrice int64
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.Name,
		arg.Quantity,
		arg.UnitPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Name,
		&i.Quantity,
		&i.UnitPrice,
	)
	return i, err
}

const findOrder = `-- name: FindOrder :one
SELECT id, customer_name FROM orders WHERE id = ?
LIMIT 1
`

func (q *Queries) FindOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, findOrder, id)
	var i Order
	err := row.Scan(&i.ID, &i.CustomerName)
	return i, err
}

const findOrderItems = `-- name: FindOrderItems :many
SELECT id, order_id, name, quantity, unit_price FROM order_items
WHERE order_id = ?
`

func (q *Queries) FindOrderItems(ctx context.Context, orderID string) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, findOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Name,
			&i.Quantity,
			&i.UnitPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
